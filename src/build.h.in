// SPDX-License-Identifier: BSD-2-Clause
/*
  Copyright (c) Matthias Schiffer <mschiffer@universe-factory.net>
  All rights reserved.
*/

/**
   \file

   Generated configuration
*/


#pragma once

/** Defined if the platform supports the AI_ADDRCONFIG flag to getaddrinfo() */
#mesondefine HAVE_AI_ADDRCONFIG

/** Defined if the platform defines get_current_dir_name() */
#mesondefine HAVE_GET_CURRENT_DIR_NAME

/** Defined if <endian.h> exists */
#mesondefine HAVE_ENDIAN_H

/** Defined if <sys/endian.h> exists */
#mesondefine HAVE_SYS_ENDIAN_H

/** Defined if be32toh etc. exist */
#mesondefine HAVE_LINUX_ENDIAN

/** Defined if the platform defines setresuid() */
#mesondefine HAVE_SETRESUID

/** Defined if the platform defines setresgid() */
#mesondefine HAVE_SETRESGID

/** Defined if the platform supports SO_BINDTODEVICE */
#mesondefine USE_BINDTODEVICE

/** Defined if the platform supports epoll */
#mesondefine USE_EPOLL

/** Defined if the platform uses select instead of poll */
#mesondefine USE_SELECT

/** Defined if the platform supports SO_FREEBIND */
#mesondefine USE_FREEBIND

/** Defined if the platform supports IP_MTU_DISCOVER */
#mesondefine USE_PMTU

/** Defined if the platform supports IP_PKTINFO */
#mesondefine USE_PKTINFO

/** Defined if the platform supports SO_MARK */
#mesondefine USE_PACKET_MARK

/** Defined if the platform supports settings users and groups */
#mesondefine USE_USER

/** Defined if the platform supports binding on IPv4 and IPv6 with a single socket */
#mesondefine USE_MULTIAF_BIND


/** Defined if POSIX capability support is enabled */
#mesondefine WITH_CAPABILITIES

/** Defined if support for setting user/group related options on the command line is enabled */
#mesondefine WITH_CMDLINE_USER

/** Defined if support for setting logging related options on the command line is enabled */
#mesondefine WITH_CMDLINE_LOGGING

/** Defined if support for setting related to the VPN operation (like mode, interface, encryption method) on the command line is enabled */
#mesondefine WITH_CMDLINE_OPERATION

/** Defined if support for setting handler scripts (e.g. --on-up) on the command line is enabled */
#mesondefine WITH_CMDLINE_COMMANDS

/** Defined if on-verify support is enabled */
#mesondefine WITH_DYNAMIC_PEERS

/** Defined if status socket support is enabled */
#mesondefine WITH_STATUS_SOCKET

/** Defined if systemd support is enabled */
#mesondefine WITH_SYSTEMD


/** Defined if L2TP offloading is enabled */
#mesondefine WITH_OFFLOAD_L2TP


/** Defined if libsodium is used */
#mesondefine HAVE_LIBSODIUM


/** The maximum depth of nested includes in config files */
#define MAX_CONFIG_DEPTH 10


/** The default handshake interval */
#define DEFAULT_HANDSHAKE_INTERVAL 20000 /* 20 seconds */

/** The default handshake interval jitter */
#define DEFAULT_HANDSHAKE_JITTER 2500	/* 2.5 seconds */

/** The interval of periodic maintenance tasks */
#define MAINTENANCE_INTERVAL 10000	/* 10 seconds */

/** The time after which a keepalive should be sent */
#define KEEPALIVE_TIMEOUT 20000		/* 20 seconds */

/** The time after with a peer is reset if no traffic is received from it */
#define PEER_STALE_TIME 90000		/* 90 seconds */

/** The time after which a peer's ethernet address is forgotten if it is not seen */
#define ETH_ADDR_STALE_TIME 300000	/* 5 minutes */


/** The time after a packet is received and no packets with lower sequence numbers are accepted anymore */
#define REORDER_TIME 10000


/** The minimum time that must pass between two on-verify calls on the same peer */
#define MIN_VERIFY_INTERVAL 10000	/* 10 seconds */

/** How long a peer stays valid after a successful on-verify run */
#define VERIFY_VALID_TIME 60000		/* 1 minute */

/** Maximum number of concurrent on-verify runs */
#define VERIFY_LIMIT 32

/** The minimum interval between two handshakes with a peer */
#define MIN_HANDSHAKE_INTERVAL 15000	/* 15 seconds */

/** The minimum interval between two resolves of the same remote */
#define MIN_RESOLVE_INTERVAL 15000	/* 15 seconds */

/** The number of hash tables for backoff_unknown() */
#define UNKNOWN_TABLES 16

/** The number of entries per unknown peer table */
#define UNKNOWN_ENTRIES 64



/** How long a session stays valid after a key is negotiated */
#define KEY_VALID 3600000		/* 60 minutes */

/** How long an old session stays valid after a new session has been established */
#define KEY_VALID_OLD 60000		/* 1 minute */

/** How many seconds after the establishment of a session we want to refresh the session */
#define KEY_REFRESH 3300000		/* 55 minutes */

/** A random time up to KEY_REFRESH_SPLAY is subtracted from KEY_REFRESH */
#define KEY_REFRESH_SPLAY 300000	/* 5 minutes */
